apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.compileSdk

    defaultConfig {
        applicationId "org.rajawali3d.examples"
        minSdkVersion 16
        targetSdkVersion rootProject.targetSdk
        versionCode getGitCommitCount()
        versionName version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            defaultConfig.minSdkVersion 21
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    lintOptions {
        abortOnError false
    }
    packagingOptions {
        pickFirst 'lib/armeabi-v7a/libvraudio_engine.so'
        pickFirst 'lib/armeabi-v7a/libvrtoolkit.so'
    }
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation "androidx.core:core-ktx:1.7.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    implementation project(':rajawali')

    wearApp project(':wear-example')

    androidTestImplementation 'com.github.AppDevNext:Moka:1.1'
    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_core"

    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.ext:truth:1.4.0"
}

def adbDirectory = '/storage/emulated/0/Download' // api 28
//def adbDirectory = '/storage/self/primary/Download' // api 21
def reportsDirectory = "$projectDir/../screenshots/adb"

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    println "clearScreenshotsTask 'adb shell rm -r $adbDirectory'"
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', adbDirectory
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    println "createScreenshotDirectoryTask"
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', adbDirectory
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    println "fetchScreenshotsTask"
    executable "${android.getAdbExe().toString()}"
    args 'pull', adbDirectory + '/.', reportsDirectory

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(reportsDirectory).mkdirs()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('connected') && task.name.endsWith('DebugAndroidTest')) {
        task.mustRunAfter {
            clearScreenshotsTask
            createScreenshotDirectoryTask
        }
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}
